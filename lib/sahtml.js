// Generated by CoffeeScript 1.4.0
(function() {
  var AllHtmlEntities, SAHtml, XmlEntities, _ref;

  _ref = require('html-entities'), XmlEntities = _ref.XmlEntities, AllHtmlEntities = _ref.AllHtmlEntities;

  SAHtml = (function() {
    var encoder, xmlEncoder;

    encoder = new AllHtmlEntities;

    xmlEncoder = new XmlEntities;

    SAHtml.STATE_TAG_CONTENT = 1;

    SAHtml.STATE_TAG_DEF = 2;

    SAHtml.ENTITY_TAG_DEF = 'tagDef';

    SAHtml.ENTITY_TAG_ATTR = 'tagAttr';

    SAHtml.ENTITY_TAG_DEF_END = 'tagDefEnd';

    SAHtml.ENTITY_TAG_DEF_AUTOCLOSE_END = 'tagDefAutoEnd';

    SAHtml.ENTITY_TAG_CLOSE = 'tagClose';

    SAHtml.ENTITY_STRING = 'string';

    SAHtml.ENTITY_DOCTYPE = 'doctype';

    SAHtml.ENTITY_COMMENT = 'comment';

    SAHtml.ENTITY_CDATA = 'cdata';

    SAHtml.ENTITY_EOF = 'eof';

    function SAHtml(str) {
      this.str = str || '';
      this.len = this.str.length;
      this.pos = 0;
      this.state = SAHtml.STATE_TAG_CONTENT;
      this.currentTag = null;
      this.xhtml = false;
      this.autoDetectXHtml = true;
    }

    SAHtml.prototype.isWhitespace = function(c) {
      return c === ' ' || c === "\t" || c === "\r" || c === "\n" || c === "\f";
    };

    SAHtml.prototype.EOF = function() {
      return {
        type: SAHtml.ENTITY_EOF,
        pos: this.str.length
      };
    };

    SAHtml.prototype.noHtmlContentTags = {
      script: true,
      textarea: true,
      style: true,
      xmp: true
    };

    SAHtml.prototype.noDecodeTags = {
      script: true,
      style: true
    };

    SAHtml.prototype.getPos = function() {
      return this.pos;
    };

    SAHtml.prototype.setPos = function(pos) {
      this.pos = pos;
    };

    SAHtml.prototype.isXHtml = function() {
      return this.xhtml;
    };

    SAHtml.prototype.setXHtml = function(xhtml) {
      this.xhtml = xhtml;
    };

    SAHtml.prototype.getAutoDetectXHtml = function() {
      return this.autoDetectXHtml;
    };

    SAHtml.prototype.setAutoDetectXHtml = function(autoDetectXHtml) {
      this.autoDetectXHtml = autoDetectXHtml;
    };

    SAHtml.prototype.decodeText = function(text) {
      return encoder.decode(text).replace(/[\n\r\t\f ]+/g, ' ');
    };

    SAHtml.prototype.next = function() {
      var attrName, attrValue, cdata, chr, comment, content, doctype, endPos, endStr, len, spos, tagName;
      len = this.len;
      if (this.state === SAHtml.STATE_TAG_DEF) {
        chr = null;
        while (this.pos < len) {
          chr = this.str.charAt(this.pos);
          if (!this.isWhitespace(chr)) {
            break;
          }
          this.pos++;
        }
        if (this.pos >= len) {
          this.state = SAHtml.STATE_TAG_CONTENT;
          return {
            type: SAHtml.ENTITY_TAG_DEF_END,
            pos: len
          };
        }
        spos = this.pos;
        if (chr === ">") {
          this.pos++;
          this.state = SAHtml.STATE_TAG_CONTENT;
          return {
            type: SAHtml.ENTITY_TAG_DEF_END,
            pos: spos
          };
        }
        if (chr === "/") {
          this.pos++;
          while (this.pos < len) {
            chr = this.str.charAt(this.pos);
            if (chr === '>') {
              this.pos++;
              break;
            }
            this.pos++;
          }
          this.state = SAHtml.STATE_TAG_CONTENT;
          if (this.currentTag && !this.xhtml && this.noHtmlContentTags[this.currentTag]) {
            return {
              type: SAHtml.ENTITY_TAG_DEF_END,
              pos: spos
            };
          } else {
            return {
              type: SAHtml.ENTITY_TAG_DEF_AUTOCLOSE_END,
              pos: spos
            };
          }
        }
        attrName = '';
        while (this.pos < len) {
          chr = this.str.charAt(this.pos);
          if (this.isWhitespace(chr) || chr === '>' || chr === '/') {
            return {
              type: SAHtml.ENTITY_TAG_ATTR,
              name: attrName.toLowerCase(),
              pos: spos
            };
          }
          if (chr === '=') {
            this.pos++;
            chr = this.str.charAt(this.pos);
            attrValue = '';
            if (chr === '"') {
              this.pos++;
              while (this.pos < len) {
                chr = this.str.charAt(this.pos);
                if (chr === '"') {
                  this.pos++;
                  break;
                }
                attrValue += chr;
                this.pos++;
              }
            } else if (chr === '\'') {
              this.pos++;
              while (this.pos < len) {
                chr = this.str.charAt(this.pos);
                if (chr === '\'') {
                  this.pos++;
                  break;
                }
                attrValue += chr;
                this.pos++;
              }
            } else {
              while (this.pos < len) {
                chr = this.str.charAt(this.pos);
                if (this.isWhitespace(chr) || chr === '>') {
                  break;
                }
                if (chr === '/' && this.str.charAt(this.pos + 1) === '>') {
                  break;
                }
                attrValue += chr;
                this.pos++;
              }
            }
            return {
              type: SAHtml.ENTITY_TAG_ATTR,
              name: attrName.toLowerCase(),
              value: this.decodeText(attrValue),
              pos: spos
            };
          }
          attrName += chr;
          this.pos++;
        }
        if (this.pos >= len) {
          return {
            type: SAHtml.ENTITY_TAG_ATTR,
            name: attrName.toLowerCase(),
            pos: spos
          };
        }
      } else if (this.state === SAHtml.STATE_TAG_CONTENT) {
        if (this.pos >= len) {
          return this.EOF();
        }
        spos = this.pos;
        content = '';
        if (this.currentTag && !this.xhtml && this.noHtmlContentTags[this.currentTag]) {
          endStr = "</" + this.currentTag + ">";
          endPos = this.str.indexOf(endStr, this.pos);
          if (endPos === -1) {
            endPos = len;
          }
          content = this.str.substring(this.pos, endPos);
          if (this.pos !== endPos) {
            spos = this.pos;
            this.pos = endPos;
            return {
              type: SAHtml.ENTITY_STRING,
              value: this.noDecodeTags[this.currentTag] ? content : this.decodeText(content),
              pos: spos
            };
          }
        }
        while (this.pos < len) {
          chr = this.str.charAt(this.pos);
          if (chr === '<' && !this.isWhitespace(this.str.charAt(this.pos + 1))) {
            if (content !== '') {
              return {
                type: SAHtml.ENTITY_STRING,
                value: this.decodeText(content),
                pos: spos
              };
            }
            spos = this.pos;
            this.pos++;
            chr = this.str.charAt(this.pos);
            tagName = '';
            if (chr === '/') {
              this.pos++;
              while (this.pos < len) {
                chr = this.str.charAt(this.pos);
                if (this.isWhitespace(chr) || chr === '>') {
                  break;
                }
                tagName += chr;
                this.pos++;
              }
              while (this.pos < len) {
                chr = this.str.charAt(this.pos);
                if (chr === '>') {
                  this.pos++;
                  break;
                }
                this.pos++;
              }
              this.currentTag = null;
              return {
                type: SAHtml.ENTITY_TAG_CLOSE,
                name: tagName.toLowerCase(),
                pos: spos
              };
            }
            if (chr === '!') {
              this.pos++;
              chr = this.str.charAt(this.pos);
              if (this.str.substr(this.pos, 7).toLowerCase() === 'doctype') {
                endPos = this.str.indexOf('>', this.pos);
                if (endPos === -1) {
                  endPos = len;
                }
                doctype = endPos > this.pos + 8 ? this.str.substring(this.pos + 8, endPos) : '';
                this.pos = endPos + 1;
                if (this.autoDetectXHtml) {
                  this.xhtml = doctype.toLowerCase().indexOf('xhtml') !== -1;
                }
                return {
                  type: SAHtml.ENTITY_DOCTYPE,
                  value: doctype,
                  pos: spos
                };
              } else if (this.xhtml && this.str.substr(this.pos, 7) === '[CDATA[') {
                endPos = this.str.indexOf(']]>', this.pos);
                if (endPos === -1) {
                  endPos = len;
                }
                cdata = endPos > this.pos + 7 ? this.str.substring(this.pos + 7, endPos) : '';
                this.pos = endPos + 3;
                return {
                  type: SAHtml.ENTITY_CDATA,
                  value: cdata,
                  pos: spos
                };
              } else {
                if (chr === '-' && this.str.charAt(this.pos + 1) === '-') {
                  this.pos += 2;
                  endPos = this.str.indexOf('-->', this.pos);
                  comment = this.str.substring(this.pos, endPos);
                  if (endPos === -1) {
                    endPos = len;
                  }
                  this.pos = endPos + 3;
                } else {
                  endPos = this.str.indexOf('>', this.pos);
                  comment = this.str.substring(this.pos, endPos);
                  if (endPos === -1) {
                    endPos = len;
                  }
                  this.pos = endPos + 1;
                }
                return {
                  type: SAHtml.ENTITY_COMMENT,
                  value: comment,
                  pos: spos
                };
              }
            }
            while (this.pos < len) {
              chr = this.str.charAt(this.pos);
              if (this.isWhitespace(chr) || chr === '>' || chr === '/') {
                break;
              }
              tagName += chr;
              this.pos++;
            }
            this.state = SAHtml.STATE_TAG_DEF;
            tagName = tagName.toLowerCase();
            this.currentTag = tagName;
            return {
              type: SAHtml.ENTITY_TAG_DEF,
              name: tagName,
              pos: spos
            };
          } else {
            content += chr;
          }
          this.pos++;
        }
        if (content !== '') {
          return {
            type: SAHtml.ENTITY_STRING,
            value: this.decodeText(content),
            pos: spos
          };
        } else {
          return this.EOF();
        }
      }
    };

    SAHtml.prototype.all = function() {
      var e, result;
      result = [];
      while ((e = this.next()).type !== SAHtml.ENTITY_EOF) {
        result.push(e);
      }
      return result;
    };

    SAHtml.prototype.render = function(entities) {
      var encodeText, entity, result, _i, _len;
      result = [];
      encodeText = true;
      for (_i = 0, _len = entities.length; _i < _len; _i++) {
        entity = entities[_i];
        switch (entity.type) {
          case SAHtml.ENTITY_TAG_DEF:
            result.push("<" + entity.name);
            if (this.noDecodeTags[entity.name] && !this.xhtml) {
              encodeText = false;
            }
            break;
          case SAHtml.ENTITY_TAG_ATTR:
            if (entity.value !== void 0) {
              result.push(" " + entity.name + "=\"" + (xmlEncoder.encode(entity.value)) + "\"");
            } else {
              result.push(" " + entity.name);
            }
            break;
          case SAHtml.ENTITY_TAG_DEF_END:
            result.push(">");
            break;
          case SAHtml.ENTITY_TAG_DEF_AUTOCLOSE_END:
            result.push("/>");
            break;
          case SAHtml.ENTITY_TAG_CLOSE:
            result.push("</" + entity.name + ">");
            encodeText = true;
            break;
          case SAHtml.ENTITY_STRING:
            result.push((encodeText ? xmlEncoder.encode(entity.value) : entity.value));
            break;
          case SAHtml.ENTITY_DOCTYPE:
            result.push("<!DOCTYPE " + entity.value + ">");
            break;
          case SAHtml.ENTITY_COMMENT:
            result.push("<!--" + entity.value + "-->");
            break;
          case SAHtml.ENTITY_CDATA:
            result.push("<![CDATA[" + entity.value + "]]>");
            break;
          default:
            throw Error('Unknown entity type: ' + entity.type + '.');
        }
      }
      return result.join('');
    };

    return SAHtml;

  })();

  exports.SAHtml = SAHtml;

}).call(this);
